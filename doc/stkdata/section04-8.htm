<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<style type="text/css">
<!--
.spc { margin-left: 2em; margin-right: 0em; }
-->
</style>

<div id="container">

<H2>4.8 RecordData</H2>
StkDataのレコードにアクセスするためのクラス（データモデル）です。<P>

<H3>4.8.1 RecordDataのメンバ変数</H3>
private<BR>
<TABLE BORDER="1">
<TR><TD>int</TD><TD>m_CurrentColumnNum</TD><TD>インスタンスを構成する実際のカラム数</TD></TR>
<TR><TD>wchar_t</TD><TD>m_TableName[TABLE_NAME_SIZE]</TD><TD>テーブル名</TD></TR>
<TR><TD>ColumnData*</TD><TD>m_ColumnData[MAX_COLUMN_NUMBER]</TD><TD>カラムを格納する配列</TD></TR>
<TR><TD>RecordData*</TD><TD>m_NextRecord</TD><TD>次のRecordDataへのポインタ<BR>NULL:次のRecordDataは存在しません</TD></TR>
</TABLE><P>

<H3>4.8.2 RecordDataの関数</H3>
(1) RecordData()<BR>
<div class=spc>
デフォルトコンストラクタ。
</div><P>

(2) RecordData(wchar_t TableName[TABLE_NAME_SIZE], ColumnData** ColDat, int NumOfColDat)<BR>
<div class=spc>
コンストラクタ。指定したカラムを含むRecordDataインスタンスを生成します。
<TABLE BORDER="1">
<TR><TD>TableName</TD><TD>テーブル名</TD></TR>
<TR><TD>ColDat</TD><TD>追加する1つ以上のカラムを含むColumnData[]配列</TD></TR>
<TR><TD>NumOfColDat</TD><TD>ColDatの配列の数</TD></TR>
</TABLE>
</div><P>

(3) virtual ~RecordData()<BR>
<div class=spc>
デストラクタ。<br>
デストラクタではRecordDataインスタンスと関連するすべてのインスタンス（m_ColumnDataおよびm_NextRecordで関連するすべてのインスタンス）をdeleteします。<br>
GetRecord関数はRecordDataインスタンスを生成し，それを呼び出し元に返します。
RecordDataインスタンスはColumnDataインスタンスを含んでおり，また，RecordDataインスタンス
自身も他のRecordDataインスタンスと連結している場合があります。
GetRecord関数で取得したRecordDataインスタンスの数が膨大になる場合，使い終わった
RecordDataインスタンスは削除してメモリを開放する必要があります。<BR>
GetRecord関数で取得したRecordDataインスタンスをdeleteすることにより，指定されたRecordDataインスタンスだけでなく，
それに連結するインスタンスについて，中に梱包されているColumnDataインスタンスを含めて削除します。
GetRecord関数を用いて取得したインスタンスを削除するだけでなく，
InsertRecord関数やUpdateRecord関数用にユーザーが作成したRecordDataインスタンスを削除
することができます（InsertRecord関数等でユーザーが作成／指定したRecordDataインスタンスは，
通常関数呼び出し後，別の用途で使用される機会は少ない）。
</div><P>

(4) void AddColumn(ColumnData* ColDat)<BR>
<div class=spc>
カラムを追加します。
<TABLE BORDER="1">
<TR><TD>ColDat</TD><TD>追加するカラム</TD></TR>
</TABLE>
</div><P>

(5) void DeleteColumn()<BR>
<div class=spc>
最後に追加したカラムを削除します。
</div><P>

(6) ColumnData* GetColumn(int ColIndex)<BR>
<div class=spc>
ColIndex番目に追加したカラムを取得します。
<TABLE BORDER="1">
<TR><TD>ColIndex</TD><TD>登録されているカラムのインデックス値</TD></TR>
<TR><TD>戻り値</TD><TD>指定したインデックス値で特定したカラムを返す。カラムが特定できない場合，NULLを返す。</TD></TR>
</TABLE>
</div><P>

(7) ColumnData* GetColumn(wchar_t* ColName)<BR>
<div class=spc>
指定した名称のカラムを取得します。
<TABLE BORDER="1">
<TR><TD>ColName)</TD><TD>登録されているカラムの名称</TD></TR>
<TR><TD>戻り値</TD><TD>指定した名称で特定したカラムを返す。カラムが特定できない場合，NULLを返す。</TD></TR>
</TABLE>
</div><P>

(8) int GetColumnCount()<BR>
<div class=spc>
RecordDataに設定されているカラムの数を返します。
</div><P>

(9) void SetTableName(wchar_t* TableName)<BR>
<div class=spc>
テーブル名を指定します。TableNameが16文字(NULL含む)を超えた場合，17文字目以降の文字は切り取られます。
<TABLE BORDER="1">
<TR><TD>TableName</TD><TD>テーブル名</TD></TR>
</TABLE>
</div><P>

(10) wchar_t* GetTableName()<BR>
<div class=spc>
テーブル名を取得します。
<TABLE BORDER="1">
<TR><TD>戻り値</TD><TD>テーブル名</TD></TR>
</TABLE>
</div><P>

(11) void SetNextRecord(RecordData* RecDat)<BR>
<div class=spc>
次のレコードを設定します。
<TABLE BORDER="1">
<TR><TD>RecDat</TD><TD>次のレコード</TD></TR>
</TABLE>
</div><P>

(12) RecordData* GetNextRecord()<BR>
<div class=spc>
次のレコードを取得します。
<TABLE BORDER="1">
<TR><TD>戻り値</TD><TD>次のレコード<BR>NULL:レコードは存在しません</TD></TR>
</TABLE>
</div><P>


</div>
</BODY>
