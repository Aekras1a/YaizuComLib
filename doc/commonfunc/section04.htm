<HEAD>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<meta http-equiv="content-style-type" content="text/css">
<link rel="stylesheet" href="./style.css" type="text/css">
</HEAD>

<BODY>
<div id="container">
<H1>4. StkObject</H1>

<H2 ID="4.1">4.1 StkObject概要</H2>
<div class="topic">
StkObjectは，XMLまたはJSON形式のデータを処理するAPIを提供します。<br>
提供するAPIには，以下に示すものがあります。<br>
<ul>
<li>XMLまたはJSON形式のデータをStkObjectインスタンスの集合に変換するAPI</li>
<li>StkObjectインスタンスの集合をXMLまたはJSON形式のデータに変換するAPI</li>
</ul>
<p>
StkObjectインスタンスは，下図に示すように，属性保持領域(Attribute)および要素保持領域(Element)が子のStkObjectインスタンスを梱包する入れ子構造を成すことができます。<br/>
<img src="stkobject-abst-s.jpg"/><br/>
また，StkObjectインスタンスは，値（整数や単精度浮動小数点数，文字列）を保持することができます。<br/>
StkObjectインスタンスには以下の型があります。<br/>
<ul>
<li>コンテナ型</li>
コンテナ型のStkObjectインスタンスは，値を保持することはできませんが，属性保持領域および要素保持領域に子のStkObjectインスタンスを梱包することができます。
<li>整数型</li>
整数値を保持することができます。子のStkObjectインスタンスを梱包することはできません。
<li>単精度浮動小数点数型</li>
単精度浮動小数点数値を保持することができます。子のStkObjectインスタンスを梱包することはできません。
<li>文字列型</li>
文字列を保持することができます。子のStkObjectインスタンスを梱包することはできません。
</ul>
</p>
</div><p>



<H2 ID="4.2">4.2 StkObjectの使用方法</H2>
<div class="topic">
StkObjectの機能を利用するために，クライアントプログラムは，以下の.hファイル，.libファイルを事前に参照可能な状態にしておく必要があります。<p>
<table class="tblstyle">
<tr><td>.hファイル</td><td>StkObject.h</td></tr>
<tr><td>.libファイル</td><td>commonfunc.lib</td></tr>
</table><p>
</div><p>



<H2 ID="4.3">4.3 API一覧</H2>
<div class="topic">
StkObjectクラスが提供するAPI一覧を以下に示します。<br>
<table class="tblstyle">
<tr><td>StkObject(TCHAR*)</td><td>コンストラクタ。値を持たないインスタンスを生成する。</td></tr>
<tr><td>StkObject(TCHAR*, int)</td><td>コンストラクタ。int型の値を持つインスタンスを生成する。</td></tr>
<tr><td>StkObject(TCHAR*, float)</td><td>コンストラクタ。float型の値を持つインスタンスを生成する。</td></tr>
<tr><td>StkObject(TCHAR*, TCHAR*)</td><td>コンストラクタ。文字列型の値を持つインスタンスを生成する。</td></tr>
<tr><td>virtual ~StkObject()</td><td>デストラクタ。</td></tr>
<tr><td>StkObject* Clone()</td><td>インスタンスのクローンを生成する。</td></tr>
<tr><td>BOOL Equals(StkObject*)</td><td>指定したインスタンスとの同一性を確認する。</td></tr>
<tr><td>StkObject* Contains(StkObject*)</td><td>指定したインスタンスが含まれるかどうかを確認する。</td></tr>
<tr><td>int GetArrayLength()</td><td>同じ階層にある要素の数を返す。</td></tr>
<tr><td>int GetChildElementCount()</td><td>ひとつ下の階層にある要素の数を返す。</td></tr>
<tr><td>int GetAttributeCount()</td><td>属性として存在するStkObjectインスタンスの数を返す。</td></tr>
<tr><td>TCHAR* GetName()</td><td>StkObjectインスタンスの名称を返す。</td></tr>
<tr><td>int GetType()</td><td>StkObjectインスタンスの型を返す。</td></tr>
<tr><td>int GetIntValue()</td><td>整数型のStkObjectインスタンスの値を返す。</td></tr>
<tr><td>float GetFloatValue()</td><td>単精度浮動小数点数型のStkObjectインスタンスの値を返す。</td></tr>
<tr><td>TCHAR* GetStringValue()</td><td>文字列型のStkObjectインスタンスの値を返す。</td></tr>
<tr><td>void SetIntValue(int)</td><td>整数型のStkObjectインスタンスに値を設定する。</td></tr>
<tr><td>void SetFloatValue(float)</td><td>単精度浮動小数点数型のStkObjectインスタンスに値を設定する。</td></tr>
<tr><td>void SetStringValue(TCHAR*)</td><td>文字列型のStkObjectインスタンスに値を設定する。</td></tr>
<tr><td>StkObject* GetFirstChildElement()</td><td>子のStkObjectインスタンスのうち，一番先頭のインスタンスを返す。</td></tr>
<tr><td>StkObject* GetLastChildElement()</td><td>子のStkObjectインスタンスのうち，一番最後のインスタンスを返す。</td></tr>
<tr><td>StkObject* GetFirstAttribute()</td><td>属性であるStkObjectインスタンスのうち，一番先頭のインスタンスを返す。</td></tr>
<tr><td>StkObject* GetLastAttribute()</td><td>属性であるStkObjectインスタンスのうち，一番最後のインスタンスを返す。</td></tr>
<tr><td>StkObject* GetNext()</td><td>同じ階層に存在するStkObjectインスタンスのうち，次のインスタンスを返す。</td></tr>
<tr><td>void AppendChildElement(StkObject*)</td><td>子にStkObjectインスタンスを追加する。</td></tr>
<tr><td>void AppendAttribute(StkObject*)</td><td>属性としてStkObjectインスタンスを追加する。</td></tr>
<tr><td>void ToXml(std::wstring*)</td><td>XMLを生成する。</td></tr>
<tr><td>void ToJson(std::wstring*)</td><td>JSONを生成する。</td></tr>
<tr><td>static StkObject* CreateObjectFromXml(TCHAR*, int*)</td><td>XMLから入れ子構造のStkObjectインスタンスを生成する。</td></tr>
<tr><td>static StkObject* CreateObjectFromJson(TCHAR*, int*)</td><td>JSONから入れ子構造のStkObjectインスタンスを生成する。</td></tr>
</table><p>
</div><p>



<H2 ID="4.4">4.4 int Aaa(int* Value)</H2>
<div class="topic">
ccccc<br>
<table class="tblstyle">
<tr><td>Value[入力]</td><td>Value</td></tr>
<tr><td>[戻り値]</td><td>xxx</td></tr>
</table>
</div><p>



</div>
</BODY>
